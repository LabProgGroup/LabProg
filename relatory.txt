23/04

> quanto vale o tick do relogio?

-Vamos usar o idioma ingles para definir nomes de variáveis e funções.
-Decidimos que a nave deve se movimentar e mirar independentemente, portanto adicionamos o atributo de aim a ship.c
-As definições de structs serão feitas nos arquivos .h
-Passaremos nossos programas por checkstyle.c
-life: um inteiro de 0 a 100
-precison: um inteiro de 0 a 10
-Teremos um arquivo ultils.h e/ou utills.c que terá, por enquanto, uma estrutura que define a posicao de alguma coisa.
-A struct de posicao também será usada para velocidade.
-Nosso cenário será representado por uma fila. Adicionaremos os arquivos queue.c e queue.h
-Também teremos uma função distance em utils.c
-Incluiremos a biblioteca matematica em utils.h

-Nikolai fez os arquivos utils.h e "tiro.c" (o nome mudará)
-Gustavo fez o arquivo defesa.h
-Sesso preparou o git para controle de versões

24/04
AVISO: Retirar definição de NULL desnecessaria em utils.h pois já está definida na <stdlib.h>
-arquivos enemy.c e enemy.h com primeira versões prontas

25/04
-Gustavo começou a fazer ship.c e ship.h
-Adicionei a função gotShot em enemy.h
-Adicionei a função isAlive em enemy.h
-Usaremos unidades de metro e segundos para grandezas de posição e velocidade
-Qual a relação X e Y??? Por onde a nave começa?

26/04
Os eixos:
    y
    |   z
    |  /
    | /
    |/_________x
-Definimos a variável, com o valor em segundos, do tick do relógio.
-Definimos uma variável com a norma do vetor velocidade do tiro.
-Definir em algum lugar as variaveis xSize e ySize que correspondem ao tamanho da tela
-O inimigo, por enquanto vai atirar exatamente onde a nave está. Decidimos que o tiro vai ser bem rápido.
-Defininos o fps como 20 por default, usuário poderá escolher outro, se desejar

27/04-Dificuldade em decidir qual tipo de fila usar
     -Arquivo utils.h contém agora a declaração das variáveis globais:
      clockTick, largura e altura da janela. 
     -Decisão de dar ao tiro velocidade (x, y, z) constante, sem aceleração.
     -
     
